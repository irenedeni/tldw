import React, { useState } from 'react';
import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'

const inter = Inter({ subsets: ['latin'] })

type Props = {
  whisperEndpoint: string;
  authToken: string;
}


export default function Home({ whisperEndpoint, authToken } : Props) {
  const [file, setFile] = useState(null);
  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);

  const uploadFile = async (file: any) => {
    console.log('FILE1', file)
    setLoading(true);

    const formData = new FormData();
    formData.append("file", file);
    formData.append("model", "whisper-1");
    console.log('formData', formData)
    console.log('authToken', authToken)

    const data = await fetch(whisperEndpoint, {
      headers:{
        "Authorization": `Bearer ${authToken}`,
      },
      method: "POST",
      body: formData,
    })
      .then((response) => {
        console.log('response!!', response)
        return response.json()
      })
      .then((result) => {
        console.log('result!!', result)
        return result;
      })
      .catch((error) => {
        console.error("Error:", error);
      });
    return data;
  };

  const handleSubmit = async (e:any) => {
    e.preventDefault();
    const res = await uploadFile(file);
    console.log('res in index', res)
    setResult(res.text);
    setLoading(false);
  };


  const handleChange = (e:any) => {
    console.log("EVENT!", e.target)
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0])
      const body = new FormData();
      body.append("image", e.target.files[0]);
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <form onSubmit={handleSubmit}>
          <input
            type="file"
            accept="audio/*"
            name="file"
            onChange={handleChange}
          />
          {/* <input
            type="text"
            name="youtube"
            onChange={handleChange}
          /> */}
        <button type="submit">Process</button>
      </form>
      <div className="results">
        {result && !loading && (
          <div>
            <h3>Transcription</h3>
            {result}
          </div>
        )}
      </div>
      </main>
    </>
  )
}

export const getStaticProps = () => {
  const whisperEndpoint = process.env.WHISPER_ENDPOINT
  const authToken = process.env.AUTHORIZATION_TOKEN

  return {
    props: { 
      whisperEndpoint,
      authToken
    },
  }
}