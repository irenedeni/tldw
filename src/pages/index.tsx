import React, { useState } from 'react';
import Head from 'next/head'
import { Roboto } from 'next/font/google'
import styles from '@/styles/Home.module.css'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
})
type Props = {
  whisperEndpoint: string;
  authToken: string;
}

export default function Home({ whisperEndpoint, authToken } : Props) {
  const [file, setFile] = useState(null);
  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);

  const uploadFile = async (file: any) => {
    setLoading(true);

    const formData = new FormData();
    formData.append("file", file);
    formData.append("model", "whisper-1");

    const data = await fetch(whisperEndpoint, {
      headers:{
        "Authorization": `Bearer ${authToken}`,
      },
      method: "POST",
      body: formData,
    })
      .then((response) => {
        return response.json()
      })
      .then((result) => {
        return result;
      })
      .catch((error) => {
        console.error("Error:", error);
      });
    return data;
  };

  const handleSubmit = async (e:any) => {
    e.preventDefault();
    const res = await uploadFile(file);
    setResult(res.text);
    setLoading(false);
  };


  const handleChange = (e:any) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0])
      const body = new FormData();
      body.append("image", e.target.files[0]);
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={roboto.className}>
        <div className={styles.container}>
          <form onSubmit={handleSubmit} className={styles.form}>
            <input
              type="file"
              id="file-upload"
              accept="audio/*"
              name="file"
              onChange={handleChange}
              className={styles.fileInput}
            />
          <button
            type="submit"
            disabled={file ? false : true}
            className={styles.submitBtn}
          >
            Process Audio
          </button>
        </form>
        <div className="results">
        {loading &&
          <div className={styles.loadingSpinner}>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="30" height="30">
              <circle fill="none" stroke="#333" strokeWidth="2" cx="12" cy="12" r="10" strokeDasharray="30 60">
                <animateTransform attributeName="transform" attributeType="XML" type="rotate" dur="1s" from="0 12 12" to="360 12 12" repeatCount="indefinite"/>
              </circle>
            </svg>
          </div>
        }
        {result && !loading && (
          <div className={styles.resultContainer}>
            <h3 className={styles.resultTitle}>Transcription</h3>
            <p className={styles.resultText}>{result}</p>
          </div>
        )}
      </div>
      </div>
      </main>
    </>
  )
}

export const getStaticProps = () => {
  const whisperEndpoint = process.env.WHISPER_ENDPOINT
  const authToken = process.env.AUTHORIZATION_TOKEN

  return {
    props: { 
      whisperEndpoint,
      authToken
    },
  }
}